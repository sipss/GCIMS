% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aaa-class-GCIMSDelayedOp.R
\name{GCIMSDelayedOp}
\alias{GCIMSDelayedOp}
\title{Create a \link{GCIMSDelayedOp} object}
\usage{
GCIMSDelayedOp(
  name,
  fun = NULL,
  params = list(),
  fun_extract = NULL,
  fun_aggregate = NULL
)
}
\arguments{
\item{name}{A named for de delayed operation, only used for printing.}

\item{fun}{A function that takes a \link{GCIMSSample} and returns a \link{GCIMSSample} (modified)}

\item{params}{A named list with additional arguments to be passed to function}

\item{fun_extract}{A function that takes a modified \link{GCIMSSample} and returns an extracted object.}

\item{fun_aggregate}{A function that takes a \link{GCIMSDataset} and a list of extracted objects and returns a modified \link{GCIMSDataset}.}
}
\value{
A GCIMSDelayedOp object
}
\description{
Create a \link{GCIMSDelayedOp} object
}
\details{
Let's say we have a pipeline with two actions (e.g. smooth() and detectPeaks()).
and we want to apply it to a dataset with two samples (e.g s1, s2).

This is a simple pseudocode to execute all actions in all samples:

\if{html}{\out{<div class="sourceCode">}}\preformatted{dataset = list(s1, s2)
actions = list(smooth, detectPeaks)
for (action in actions) \{
  for (i in seq_along(dataset)) \{
      dataset[[i]] <- action(dataset[[i]])
  \}
\}
}\if{html}{\out{</div>}}

When the dataset is big, samples are stored in disk, and loaded/saved when used:

\if{html}{\out{<div class="sourceCode">}}\preformatted{dataset = list(s1, s2)
actions = list(smooth, detectPeaks)
for (action in actions) \{
  for (i in seq_along(dataset)) \{
      sample <- read_from_disk(i)
      sample <- action(sample)
      save_to_disk(sample)
  \}
\}
}\if{html}{\out{</div>}}

So actually, we can avoid "saving and loading" by changing the loop order:

\if{html}{\out{<div class="sourceCode">}}\preformatted{dataset = list(s1, s2)
actions = list(smooth, detectPeaks)
for (i in seq_along(dataset)) \{
  sample <- read_from_disk(i)
  for (action in actions) \{
      sample <- action(sample)
  \}
  save_to_disk(sample)
\}
}\if{html}{\out{</div>}}

This requires that when we apply an operation to the dataset, the operation
is delayed, so we can stack many delayed operations and run them all at once.

Besides, samples can be processed in parallel if enough cores and RAM are
available.

Sometimes we want to extract some information from each sample (e.g. the Reverse Ion Chromatogram)
and build some matrix with the Reverse Ion Chromatograms of all samples. To
achieve this, we need to extend our actions with \code{fun_extract} and \code{fun_aggregate}.
\code{fun_extract} allows us to extract information from the sample. \code{fun_aggregate}
aggregates that information and stores the result in the dataset.
}
